"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta

def parseBoolean(value):
    return str(value).lower() in ('true', '1', 't', 'yes', 'y')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-q4$(9(szyfgrda!#_cey)4$wrepvej@ek0_0npjz69lxhgs7vs'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = parseBoolean(os.environ.get("DEBUG", "True"))

# Application definition

INSTALLED_APPS = [
    "channels",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "app",
]

ASGI_APPLICATION = 'config.asgi.application'

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "app.middlewares.jwtMiddleware.JwtMiddleware",
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "securitychat",
        "USER": "admin",
        "PASSWORD": "admin",
        "HOST": "database",
        "PORT": "5432",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('redis', 6379)],
        },
    },
}
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
REDIS_CONFIG = {
    "HOST": os.environ.get("REDIS_HOST"),
    "PORT": os.environ.get("REDIS_PORT"),
    "DB": os.environ.get("REDIS_DB"),
    "PASSWORD": os.environ.get("REDIS_PASSWORD"),
    "DECODE_RESPONSES": parseBoolean(os.environ.get("REDIS_HOST"))
}

PUBLIC_ENDPOINTS = [
    '/login',
    '/registry',
    '/restock-token',
]

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.environ.get("JWT_ACCESS_TOKEN_LIFETIME", 15))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.environ.get("JWT_REFRESH_TOKEN_LIFETIME", 7))),
    'ALGORITHM': os.environ.get("JWT_ALGORITHM", ""),
    'SIGNING_KEY': os.environ.get("JWT_SECRET_KEY", ""),
    'VERIFYING_KEY': os.environ.get("JWT_VERIFYING_KEY", None),
    'AUTH_HEADER_TYPES': os.environ.get("JWT_AUTH_HEADER_TYPES", ("Bearer",)),
    'AUTH_TOKEN_CLASSES': os.environ.get("JWT_AUTH_TOKEN_CLASSES", ("rest_framework_simplejwt.tokens.AccessToken",)),
    'USER_ID_FIELD': os.environ.get("JWT_USER_ID_FIELD", "id"),
    'USER_ID_CLAIM': os.environ.get("JWT_USER_ID_CLAIM", "user_id"),
}

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",")
corsCsrfAllowedHosts = os.getenv("CORS_CSRF_ALLOWED_HOSTS", "http://localhost").split(",")
ports = os.getenv("ALLOWED_PORTS").split(",")
allowedCorsCsrfOrigins = [f"{host}:{port}" for host in corsCsrfAllowedHosts for port in ports]
CORS_ALLOWED_ORIGINS = [
    *allowedCorsCsrfOrigins
]
CORS_ALLOW_CREDENTIALS = parseBoolean(os.environ.get("CORS_ALLOW_CREDENTIALS", "True"))

EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND", "")
EMAIL_HOST = os.environ.get("EMAIL_HOST", "")
EMAIL_PORT = os.environ.get("EMAIL_PORT", "")
EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS", "")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "")

AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.environ.get("AWS_STORAGE_BUCKET_NAME")
AWS_S3_REGION_NAME = os.environ.get("AWS_S3_REGION_NAME")
AWS_DEFAULT_ACL = os.environ.get("AWS_DEFAULT_ACL")
AWS_S3_CUSTOM_DOMAIN = os.environ.get("AWS_S3_CUSTOM_DOMAIN")
AWS_S3_OBJECT_PARAMETERS = os.environ.get("AWS_S3_OBJECT_PARAMETERS")
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10MB